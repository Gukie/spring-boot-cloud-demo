package org.spring.boot.cloud;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

/**
 * @author gushu
 * @date 2018/03/24
 */
@SpringBootApplication
@PropertySource(value = { "classpath:test.properties" })
public class ApplicationTest {

	@Autowired
	private static ConfigurationBean configurationBean;

	public static void main(String[] args) {
		// SpringApplication.run(ApplicationTest.class, args);
		SpringApplication springApplication = new SpringApplication(new Object[] { ApplicationTest.class });
		ConfigurableApplicationContext applicationContext = springApplication.run(args);
		

		// 'configurationBean' will not be injected by since this field will be
		// generated when ApplicationTest loaded. not after Spring container
		// startup. So it will be null.
		String appName = configurationBean == null ? null : configurationBean.getAppName();
		System.err.println("appName:" + appName);

		// this will not work since this bean is not generated by Spring
		// container. it is out of Spring control
		ConfigurationBean configurationBean2 = (new ApplicationTest()).new ConfigurationBean();
		System.err.println("appName:" + configurationBean2.getAppName());

		String projectName = applicationContext.getEnvironment().getProperty("project.name");
		System.err.println("appName:" + projectName);
	}

	@Configuration
	class ConfigurationBean {
		@Value("${project.name}")
		private String appName;

		public String getAppName() {
			return appName;
		}
	}
}
